# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'F:\Anaconda\Projects\Thesis\pointcloud_visualizer.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import webbrowser
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSignal, QRunnable, QThreadPool, QSize
from PyQt5.Qt import Qt
from PyQt5.QtGui import QImage, QBrush, QPainter, QPixmap, QColor, QIcon
import vispy
import vispy.scene
from vispy.gloo.util import _screenshot
from vispy.io import imsave
from vispy.scene import visuals
from PyQt5.QtWidgets import (QApplication, QHBoxLayout, QWidget, QFileDialog,QMessageBox, QAction) 
import customWidgets
from functools import partial


class WorkerSignals(QObject):
#definition of custom signals for the Worker class
    finished = pyqtSignal()
    result = pyqtSignal(visuals.Markers)



class Worker(QRunnable):
    def __init__(self, cw, isD = False, isA = False, scatter = None):
        super(Worker, self).__init__()
        self.cw = cw
        self.isD = isD
        self.isA = isA
        self.scatter = scatter
        self.signals = WorkerSignals()

    def run(self):
        #this method is used to run the the method of the CustomWidget package. 
        #If isD=True is called the method updateD which is used to update the scatter after modifying the density or point size or the classes displayed
        #If isA=True is called the method updateA which is used to update the alpha value of the scatter
        #If isD=isA=False, is called the method setData which is used on the first initialization of the app.
        if(self.isD == False & self.isA == False):
            scatter = self.cw.setData()
            self.signals.result.emit(scatter)
        elif(self.isA == True):
            self.cw.updateA(self.scatter)
        else:
            self.cw.updateD(self.scatter)
        self.signals.finished.emit()
  
    

class Ui_MainWindow(object):
    #class that define the user interface of the app
    sendValues = pyqtSignal(customWidgets.DataFrame)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1900, 897)
        MainWindow.setStyleSheet("MainWindow{background-color:rgb(255, 255, 255);}")
        self.threadpool = QThreadPool()
        self.cw = customWidgets.DataFrame()
        self.currentFn = ''
        self.recentFiles = []
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QWidget(self.centralwidget)
        self.widget.setObjectName('centralwidget')
        self.hlayout = QHBoxLayout(self.widget)
        self.hlayout.setObjectName('hlayout')
        self.canvas = vispy.scene.SceneCanvas(keys='interactive')
        self.openGLWidget =  self.canvas.native
        self.openGLWidget.setParent(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.openGLWidget.sizePolicy().hasHeightForWidth())
        self.openGLWidget.setSizePolicy(sizePolicy)
        self.openGLWidget.setMinimumSize(QSize(1600,1000))
        self.openGLWidget.setObjectName("openGLWidget")
        
        self.hlayout.addWidget(self.openGLWidget)
        
        self.groupBox = QtWidgets.QGroupBox(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setMinimumSize(QSize(220,500))
        self.groupBox.setStyleSheet("\n"
"background-color:rgb(244, 244, 244)")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.horizontalSlider = QtWidgets.QSlider(self.groupBox)
        self.horizontalSlider.setGeometry(QtCore.QRect(10, 100, 171, 22))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider.sizePolicy().hasHeightForWidth())
        self.horizontalSlider.setSizePolicy(sizePolicy)
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setSingleStep(1)
        self.horizontalSlider.setProperty("value", 50)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(10, 80, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.treeWidget = QtWidgets.QTreeWidget(self.groupBox)
        self.treeWidget.setGeometry(QtCore.QRect(10, 170, 201, 241))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.treeWidget.sizePolicy().hasHeightForWidth())
        self.treeWidget.setSizePolicy(sizePolicy)
        self.treeWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.treeWidget.setStyleSheet("border:none\n"
"treeWidget:hover{background-color:rgb(170, 255, 255)}\n"
"")
        self.treeWidget.setObjectName("treeWidget")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(50, 80, 47, 13))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(10, 30, 47, 13))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalSlider_2 = QtWidgets.QSlider(self.groupBox)
        self.horizontalSlider_2.setGeometry(QtCore.QRect(10, 50, 171, 22))
        self.horizontalSlider_2.setMinimum(1)
        self.horizontalSlider_2.setMaximum(100)
        self.horizontalSlider_2.setSingleStep(1)
        self.horizontalSlider_2.setProperty("value", 40)
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setGeometry(QtCore.QRect(60, 26, 31, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.groupBox)
        self.label_6.setGeometry(QtCore.QRect(10, 120, 60, 13))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox)
        self.label_7.setGeometry(QtCore.QRect(73, 120, 47, 13))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.horizontalSlider_3 = QtWidgets.QSlider(self.groupBox)
        self.horizontalSlider_3.setGeometry(QtCore.QRect(10, 140, 171, 22))
        self.horizontalSlider_3.setMinimum(1)
        self.horizontalSlider_3.setMaximum(100)
        self.horizontalSlider_3.setSingleStep(1)
        self.horizontalSlider_3.setProperty("value", 50)
        self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_3.setObjectName("horizontalSlider_3")
        self.horizontalSlider_2.setEnabled(False)
        self.horizontalSlider.setEnabled(False)
        self.horizontalSlider_3.setEnabled(False)
        
        self.hlayout.addWidget(self.groupBox)
        
        self.openGLWidget.raise_()
        self.groupBox.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1900, 21))
        self.menubar.setObjectName("menubar")
        self.menu_file = QtWidgets.QMenu(self.menubar)
        self.menu_file.setObjectName("menu_file")
        self.menu_Help = QtWidgets.QMenu(self.menubar)
        self.menu_Help.setObjectName("menu_Help")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_Open = QtWidgets.QAction(MainWindow)
        self.action_Open.setObjectName("action_Open")
        self.action_Save = QtWidgets.QAction(MainWindow)
        self.action_Save.setObjectName("action_Save")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.menu_file.addAction(self.action_Open)
        self.open_Recent_Menu = self.menu_file.addMenu('Open Recent')
        self.open_Recent_Menu.setObjectName("open_Recent_Menu")
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.action_Save)
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.actionExit)
        self.menu_Help.addAction(self.actionAbout)
        self.menubar.addAction(self.menu_file.menuAction())
        self.menubar.addAction(self.menu_Help.menuAction())

        self.retranslateUi(MainWindow)
        self.horizontalSlider_2.valueChanged['int'].connect(lambda:self.label_5.setText(str(self.horizontalSlider_2.value())+'%')) 
        self.horizontalSlider.valueChanged['int'].connect(lambda:self.label_3.setNum(round(self.horizontalSlider.value()/100,1)))
        self.horizontalSlider_3.valueChanged['int'].connect(lambda:self.label_7.setText(str(self.horizontalSlider_3.value()/10)+'px')) 
        self.horizontalSlider_2.sliderReleased.connect(self.updateD) 
        self.horizontalSlider.sliderReleased.connect(self.updateA) 
        self.horizontalSlider_3.sliderReleased.connect(self.updateS) 
        self.treeWidget.itemChanged[QtWidgets.QTreeWidgetItem, int].connect(self.updateClass)
        self.action_Open.triggered.connect(self.fileOpener)
        self.open_Recent_Menu.aboutToShow.connect(self.populateOpenRecent)
        self.action_Save.triggered.connect(self.saveScreenshot)
        self.actionExit.triggered.connect(lambda:self.close())
        self.actionAbout.triggered.connect(lambda:webbrowser.open('https://github.com/Alems8/PointCloud-visualization'))
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
 

    def retranslateUi(self, MainWindow):
        #this method set the text of all the widgets defined
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "Alpha:"))
        self.treeWidget.headerItem().setText(0, _translate("MainWindow", "Classes"))
        __sortingEnabled = self.treeWidget.isSortingEnabled()
        self.treeWidget.setSortingEnabled(False)
        self.treeWidget.setSortingEnabled(__sortingEnabled)
        self.label_3.setText(_translate("MainWindow", "0.5"))
        self.label_4.setText(_translate("MainWindow", "Density:"))
        self.label_5.setText(_translate("MainWindow", "40%"))
        self.label_6.setText(_translate("MainWindow", "Point size:"))
        self.label_7.setText(_translate("MainWindow", "5px"))
        self.menu_file.setTitle(_translate("MainWindow", "&File"))
        self.menu_Help.setTitle(_translate("MainWindow", "&Help"))
        self.action_Open.setText(_translate("MainWindow", "&Open"))
        self.action_Open.setToolTip(_translate("MainWindow", "Open a File"))
        self.action_Open.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.open_Recent_Menu.setTitle(_translate("MainWindow", "&Recent"))
        self.action_Save.setText(_translate("MainWindow", "&Save"))
        self.action_Save.setToolTip(_translate("MainWindow", "Save the current rendering"))
        self.action_Save.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setToolTip(_translate("MainWindow", "Exit the application"))
        self.actionExit.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.showMaximized()
    
    def fileOpener(self):
        #this method is called when the action_Open is triggered and let the user pick the file and call the methods to set up the canvas
        newFn, _filter = QFileDialog.getOpenFileName(self,'Seleziona il file', None,'Pickle Files (*.pkl)')
        if(newFn == ''):
            msg = QMessageBox()
            msg.setWindowTitle('Warning')
            msg.setText('Non è stato selezionato nessun file!')
            msg.setIcon(QMessageBox().Warning)
            msg.exec_()
        elif(self.currentFn != newFn):
            QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
            self.currentFn = newFn
            if(self.recentFiles.count(newFn) < 1):
                self.recentFiles.append(newFn)
            self.horizontalSlider_2.setProperty("value", 40)
            self.horizontalSlider.setProperty("value", 50) 
            self.horizontalSlider_3.setProperty("value", 50) 
            self.cw.setDf(newFn)
            self.renderCanvas()
    def populateOpenRecent(self):
        #this method is called when the open_Recent_Menu is hovered or clicked and populate the menu.
        actions = []
        for file in self.recentFiles:
            action = QAction(file, self)
            actions.append(action)
            action.triggered.connect(partial(self.openRecentFile, file))
        self.open_Recent_Menu.addActions(actions) 
    def openRecentFile(self, fileName):
        #This method is called when a file in the recent menu is clicked. It has the same behaviour as the fileOpener method and set up the canvas to be rendered.
        if(self.currentFn != fileName):
            QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
            self.currentFn = fileName
            self.horizontalSlider_2.setProperty("value", 40)
            self.horizontalSlider.setProperty("value", 50) 
            self.horizontalSlider_3.setProperty("value", 50) 
            self.cw.setDf(fileName)
            self.renderCanvas()
    def saveScreenshot(self):
        #This method is called when the action_Save is triggered and take a screenshot of the current canvas.
        pos = self.openGLWidget.mapToGlobal(QtCore.QPoint(0, 0))
        im = _screenshot((pos.x(), pos.y(), self.canvas.size[0], (self.canvas.size[1]-150)))
        file, _filter = QFileDialog.getSaveFileName(self,'Salva il file', None,'Images (*.png *.xpm *.jpg)')
        imsave(file, im)
    def setClasses(self):
        #This method is called when a new file is uploaded and populate the TreeWidget with the classes of the Point cloud
        self.treeBuilt = False
        self.treeWidget.clear()
        _translate = QtCore.QCoreApplication.translate
        classes = self.cw.getClasses()
        for i in range(len(classes)):
            item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget)
            item_1 = QtWidgets.QTreeWidgetItem(item_0)
            item_1 = QtWidgets.QTreeWidgetItem(item_0)
            self.treeWidget.topLevelItem(i).setCheckState(0, Qt.Checked)
            self.treeWidget.topLevelItem(i).setIcon(0, QIcon(self.createIconColor(i)))
            self.treeWidget.topLevelItem(i).setText(0, _translate("MainWindow", classes[i]))
            self.treeWidget.topLevelItem(i).child(1).setText(0, _translate("MainWindow", "Precision: " + str(self.cw.getAccuracy(i))))
            self.treeWidget.topLevelItem(i).child(0).setText(0, _translate("MainWindow", "Number of points: "+str(self.cw.getPoints(i))))
        self.treeBuilt = True
    def updateTree(self):
        #This method is called when there is an update of the number of points displayed and it updates the Number of points of all the classes.
        self.treeBuilt = False
        _translate = QtCore.QCoreApplication.translate
        classes = self.cw.getClasses()
        for i in range(len(classes)):
            self.treeWidget.topLevelItem(i).child(0).setText(0, _translate("MainWindow", "Number of points: "+str(self.cw.getPoints(i))))
        self.treeBuilt = True
    def createIconColor(self, i):
        #This method creates the icon of the color to be associated with the classes in the TreeWidget.
        image = QImage(16, 16, QImage.Format_ARGB32)
        image.fill(QColor(self.cw.getColor(i)))
        out_img = QImage(16, 16, QImage.Format_ARGB32)
        out_img.fill(Qt.transparent)
        brush = QBrush(image)
        painter = QPainter(out_img)
        painter.setBrush(brush)
        painter.setPen(Qt.NoPen)
        painter.drawEllipse(0, 0, 16,16)
        painter.end()
        pm = QPixmap.fromImage(out_img)
        return pm
    def setCanvas(self, scatter):
        #This method set the new scatter
        self.scatter = scatter
        view = self.canvas.central_widget.add_view()
        view.add(self.scatter)
        view.camera = 'turntable' 
    def updateCanvas(self):
        #This method is called when the canvas needs to be updated after a change made with the sliders or the TreeWidget
        self.canvas.update()
    def renderCanvas(self):
        #This method is called when a new file is loaded and creates a new Worker
        worker = Worker(self.cw)
        worker.signals.result.connect(self.setCanvas)
        self.threadpool.start(worker)
        
        worker.signals.finished.connect(self.setClasses)
        worker.signals.finished.connect(
            lambda: self.horizontalSlider_2.setEnabled(True)
            )
        worker.signals.finished.connect(
            lambda: self.horizontalSlider.setEnabled(True)
            )
        worker.signals.finished.connect(
            lambda: QApplication.restoreOverrideCursor()
            )
        worker.signals.finished.connect(
            lambda: self.horizontalSlider_3.setEnabled(True)
            )
    def updateD(self):
        #This method is called when the value of the density is changed and it creates a new Worker 
        QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
        self.cw.setDensity(self.horizontalSlider_2.value())
        worker = Worker(self.cw, isD=True, scatter = self.scatter)
        worker.signals.finished.connect(self.updateCanvas)
        self.threadpool.start(worker)
        
        self.horizontalSlider_2.setEnabled(False)
        self.horizontalSlider.setEnabled(False)
        self.horizontalSlider_3.setEnabled(False)
        self.treeWidget.setEnabled(False)
        worker.signals.finished.connect(self.updateTree)
        worker.signals.finished.connect(
            lambda: self.horizontalSlider_2.setEnabled(True)
            )
        worker.signals.finished.connect(
            lambda: self.horizontalSlider.setEnabled(True)
            )
        worker.signals.finished.connect(
            lambda: QApplication.restoreOverrideCursor()
            )
        worker.signals.finished.connect(
            lambda: self.treeWidget.setEnabled(True)
            )
        worker.signals.finished.connect(
            lambda: self.horizontalSlider_3.setEnabled(True)
            )
    def updateA(self):
        #This method is called when the value of Alpha is changed. It creates a new Worker 
        QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
        self.cw.setAlpha(self.horizontalSlider_2.value())
        worker = Worker(self.cw, isA=True, scatter = self.scatter)

        worker.signals.finished.connect(self.updateCanvas)

        
        self.threadpool.start(worker)
        
        self.horizontalSlider_2.setEnabled(False)
        self.horizontalSlider.setEnabled(False)
        self.horizontalSlider_3.setEnabled(False)
        self.treeWidget.setEnabled(False)
        worker.signals.finished.connect(
            lambda: self.horizontalSlider_2.setEnabled(True)
            )
        worker.signals.finished.connect(
            lambda: self.horizontalSlider.setEnabled(True)
            )
        worker.signals.finished.connect(
            lambda: QApplication.restoreOverrideCursor()
            )
        worker.signals.finished.connect(
            lambda: self.treeWidget.setEnabled(True)
            )
        worker.signals.finished.connect(
            lambda: self.horizontalSlider_3.setEnabled(True)
            )
    def updateClass(self,treeItem, c):
        #This method is called when there is a change in the checkbox associated with a class in the TreeWidget. It creates a new Worker. 
        if(self.treeBuilt == True):
            QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
            self.cw.setClass(treeItem.text(c))
            worker = Worker(self.cw, isD = True, scatter = self.scatter)
            worker.signals.finished.connect(self.updateCanvas)
            self.threadpool.start(worker)
        
            self.horizontalSlider_2.setEnabled(False)
            self.horizontalSlider.setEnabled(False)
            self.horizontalSlider_3.setEnabled(False)
            self.treeWidget.setEnabled(False)
            worker.signals.finished.connect(self.updateTree)
            worker.signals.finished.connect(
                lambda: self.horizontalSlider_2.setEnabled(True)
                )
            worker.signals.finished.connect(
                lambda: self.horizontalSlider.setEnabled(True)
                )
            worker.signals.finished.connect(
                lambda: QApplication.restoreOverrideCursor()
                )
            worker.signals.finished.connect(
                lambda: self.treeWidget.setEnabled(True)
                )
            worker.signals.finished.connect(
                lambda: self.horizontalSlider_3.setEnabled(True)
                )
    def updateS(self):
        #This method is called when the value of the point size is changed. It creates a new Worker 
        QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
        self.cw.setSize(self.horizontalSlider_3.value())
        worker = Worker(self.cw, isD=True, scatter = self.scatter)
        worker.signals.finished.connect(self.updateCanvas)
        self.threadpool.start(worker)
        
        self.horizontalSlider_2.setEnabled(False)
        self.horizontalSlider.setEnabled(False)
        self.horizontalSlider_3.setEnabled(False)
        self.treeWidget.setEnabled(False)
        worker.signals.finished.connect(self.updateTree)
        worker.signals.finished.connect(
            lambda: self.horizontalSlider_2.setEnabled(True)
            )
        worker.signals.finished.connect(
            lambda: self.horizontalSlider_3.setEnabled(True)
            )
        worker.signals.finished.connect(
            lambda: self.horizontalSlider.setEnabled(True)
            )
        worker.signals.finished.connect(
            lambda: QApplication.restoreOverrideCursor()
            )
        worker.signals.finished.connect(
            lambda: self.treeWidget.setEnabled(True)
            )

if __name__ == "__main__":
    import sys
    
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
